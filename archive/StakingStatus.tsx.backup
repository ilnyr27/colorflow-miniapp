import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { ColorRarity, Palette } from '@/types/game';
import { GAME_CONFIG } from '@/config/game';
import { useGameStore } from '@/store/gameStore';
import { useTelegram } from '@/hooks/useTelegram';
import { X } from 'lucide-react';

interface StakingStatusProps {
  rarity: ColorRarity;
  palette: Palette;
  onStakingComplete?: () => void;
}

export const StakingStatus: React.FC<StakingStatusProps> = ({ 
  rarity, 
  palette, 
  onStakingComplete 
}) => {
  const [currentTime, setCurrentTime] = useState(Date.now());
  const [cancelling, setCancelling] = useState(false);
  const { cancelStaking } = useGameStore();
  const { hapticFeedback, showAlert } = useTelegram();

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTime(Date.now());
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  const timeRemaining = palette.stakingEndTime 
    ? Math.max(0, palette.stakingEndTime.getTime() - currentTime)
    : 0;

  // –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –≤—ã–∑—ã–≤–∞–µ–º callback
  useEffect(() => {
    if (timeRemaining === 0 && palette.isStaking && onStakingComplete) {
      onStakingComplete();
    }
  }, [timeRemaining, palette.isStaking, onStakingComplete]);

  // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –¥–ª—è —ç—Ç–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
  const totalStakingTime = GAME_CONFIG.STAKING_TIMES[rarity] * 60 * 1000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  const progress = totalStakingTime > 0 
    ? Math.max(0, Math.min(100, ((totalStakingTime - timeRemaining) / totalStakingTime) * 100))
    : 0;

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
  const formatTime = (ms: number) => {
    const totalSeconds = Math.floor(ms / 1000);
    const days = Math.floor(totalSeconds / (24 * 60 * 60));
    const hours = Math.floor((totalSeconds % (24 * 60 * 60)) / (60 * 60));
    const minutes = Math.floor((totalSeconds % (60 * 60)) / 60);
    const seconds = totalSeconds % 60;

    if (days > 0) {
      return `${days}–¥ ${hours}—á ${minutes}–º`;
    } else if (hours > 0) {
      return `${hours}—á ${minutes}–º ${seconds}—Å`;
    } else {
      return `${minutes}–º ${seconds}—Å`;
    }
  };

  const getRarityColor = (rarity: ColorRarity): string => {
    const colors = {
      common: '#9e9e9e',
      uncommon: '#4caf50',
      rare: '#2196f3',
      mythical: '#9c27b0',
      legendary: '#ff9800',
      ascendant: '#f44336',
      unique: '#e91e63',
      ulterior: '#3f51b5',
      ultimate: '#000000'
    };
    return colors[rarity] || '#9e9e9e';
  };

  const handleCancelStaking = async () => {
    if (cancelling) return;
    
    setCancelling(true);
    hapticFeedback.medium();
    
    try {
      await cancelStaking(rarity);
      showAlert('–°—Ç–µ–π–∫–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω. –¶–≤–µ—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–∞–ª–µ—Ä–µ—é.');
      hapticFeedback.success();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å—Ç–µ–π–∫–∏–Ω–≥–∞:', error);
      showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å—Ç–µ–π–∫–∏–Ω–≥–∞');
      hapticFeedback.error();
    } finally {
      setCancelling(false);
    }
  };

  if (!palette.isStaking) {
    return null;
  }

  return (
    <motion.div 
      className="staking-status"
      initial={{ opacity: 0, scale: 0.9 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.3 }}
    >
      <div className="staking-header">
        <h3>üîÑ –°—Ç–µ–π–∫–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω</h3>
        <span 
          className="rarity-badge"
          style={{ 
            backgroundColor: getRarityColor(rarity),
            color: 'white',
            padding: '0.3rem 0.8rem',
            borderRadius: '20px',
            fontSize: '0.8rem',
            fontWeight: '600',
            textTransform: 'capitalize'
          }}
        >
          {rarity}
        </span>
      </div>

      <div className="staking-info">
        <div className="time-display">
          <p className="time-label">–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</p>
          <div className="countdown">
            {timeRemaining > 0 ? formatTime(timeRemaining) : '‚è∞ –ì–æ—Ç–æ–≤–æ!'}
          </div>
        </div>

        <div className="progress-container">
          <div className="progress-bar" style={{ 
            backgroundColor: '#f0f0f0',
            borderRadius: '10px',
            height: '8px',
            overflow: 'hidden',
            position: 'relative'
          }}>
            <motion.div 
              className="progress-fill"
              style={{
                height: '100%',
                background: `linear-gradient(90deg, #4caf50, #66bb6a)`,
                borderRadius: '10px',
                transition: 'width 0.3s ease'
              }}
              initial={{ width: 0 }}
              animate={{ width: `${progress}%` }}
              transition={{ duration: 0.5 }}
            />
          </div>
          <div className="progress-text" style={{
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginTop: '8px'
          }}>
            <span>{progress.toFixed(1)}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ</span>
            <motion.button
              className="cancel-staking-btn"
              onClick={handleCancelStaking}
              disabled={cancelling}
              style={{
                background: '#ff4444',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                padding: '4px 8px',
                fontSize: '12px',
                cursor: cancelling ? 'not-allowed' : 'pointer',
                opacity: cancelling ? 0.6 : 1,
                display: 'flex',
                alignItems: 'center',
                gap: '4px'
              }}
              whileHover={!cancelling ? { scale: 1.05 } : {}}
              whileTap={!cancelling ? { scale: 0.95 } : {}}
            >
              <X size={12} />
              {cancelling ? '–û—Ç–º–µ–Ω–∞...' : '–û—Ç–º–µ–Ω–∏—Ç—å'}
            </motion.button>
          </div>
        </div>

        {timeRemaining === 0 && (
          <motion.div 
            className="completion-notice"
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            ‚ú® –°—Ç–µ–π–∫–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ü–≤–µ—Ç!
          </motion.div>
        )}
      </div>

      <div className="staking-details">
        <p className="detail-item">
          <span className="detail-label">–¶–≤–µ—Ç–æ–≤ –≤ —Å—Ç–µ–π–∫–∏–Ω–≥–µ:</span>
          <span className="detail-value">{palette.colors.filter(c => c !== null).length}</span>
        </p>
        <p className="detail-item">
          <span className="detail-label">–û–±—â–µ–µ –≤—Ä–µ–º—è:</span>
          <span className="detail-value">{GAME_CONFIG.STAKING_TIMES[rarity]} –º–∏–Ω</span>
        </p>
      </div>
    </motion.div>
  );
};
